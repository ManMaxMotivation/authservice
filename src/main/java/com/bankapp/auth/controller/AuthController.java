package com.bankapp.auth.controller;

// –ò–º–ø–æ—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –∫–ª–∞—Å—Å–æ–≤
import com.bankapp.auth.model.Client; // –ú–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import com.bankapp.auth.service.ClientService; // –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞
import com.bankapp.auth.service.CustomMetricsService; // –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫
import com.bankapp.auth.util.SessionManager; // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
import io.micrometer.core.instrument.MeterRegistry; // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Micrometer –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ Prometheus
import io.swagger.v3.oas.annotations.Operation; // –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ Swagger –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.slf4j.Logger; // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired; // –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*; // –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è REST-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
import org.springframework.web.server.ResponseStatusException;

import java.util.Optional;

// –û–±—ä—è–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∫–∞–∫ REST-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å—ã
@RestController
// –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "/auth" (–Ω–∞–ø—Ä–∏–º–µ—Ä, /auth/register)
@RequestMapping("/auth")
// –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤ Swagger, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –∫–∞–∫ "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
@Tag(name = "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", description = "–ú–µ—Ç–æ–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—Ö–æ–¥–∞, –≤—ã—Ö–æ–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
public class AuthController {

    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    private final ClientService clientService; // –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ª–æ–≥–∏–Ω). üí• –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–∞
    private final SessionManager sessionManager; // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ (–∫—Ç–æ –≤–æ—à–µ–ª, –∫—Ç–æ –≤—ã—à–µ–ª)
    private final TimeoutController timeoutController; // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–æ–π –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    private final CustomMetricsService metricsService; // –°–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è Prometheus
    private final MeterRegistry meterRegistry; // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ –≤ Prometheus
    private final Logger log = LoggerFactory.getLogger(AuthController.class); // –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ @Autowired
    // üí• –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Spring'–æ–º
    @Autowired
    public AuthController(ClientService clientService, SessionManager sessionManager,
                          TimeoutController timeoutController, CustomMetricsService metricsService,
                          MeterRegistry meterRegistry) {
        this.clientService = clientService;
        this.sessionManager = sessionManager;
        this.timeoutController = timeoutController;
        this.metricsService = metricsService;
        this.meterRegistry = meterRegistry;
    }

    // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // üí• –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∫–æ—Å–≤–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î —á–µ—Ä–µ–∑ ClientService
    @PostMapping({"/register"})
    // –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ Swagger: –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
    @Operation(
            summary = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            description = "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            requestBody = @RequestBody(
                    description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                    required = true,
                    content = @Content(
                            mediaType = "application/x-www-form-urlencoded",
                            schema = @Schema(implementation = Void.class),
                            examples = @ExampleObject(
                                    name = "Register Example",
                                    summary = "–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                                    value = "fullName=–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤&phone=+79001112233&username=user1&password=pass1"
                            )
                    )
            )
    )
    public Client register(
            @RequestParam String fullName, // –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            @RequestParam String phone, // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            @RequestParam String username, // –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            @RequestParam String password // –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ) {
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        log.info("Register attempt for username: {}", username);
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        timeoutController.applyTimeout("register");
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫
        long startTime = System.nanoTime();

        try {
            // üí• –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ ClientService (–∑–∞–ø—Ä–æ—Å –∫ –ë–î)
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ –µ—Å—Ç—å, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            if (clientService.existsByPhone(phone)) {
                throw new ResponseStatusException(HttpStatus.CONFLICT, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " + phone);
            }

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö
            metricsService.incrementRegisterCounter();
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –∫–∞–∫ –º–µ—Ç—Ä–∏–∫—É
            metricsService.recordRegisterSummary(fullName.length());

            // üí• –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–∑–¥–µ—Å—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î)
            Client client = clientService.register(fullName, phone, username, password);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            metricsService.recordRegisterTimer(System.nanoTime() - startTime);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            return client;
        } finally {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∫–∞–∫ gauge –¥–ª—è Prometheus
            meterRegistry.gauge("auth_register_active", metricsService.getRegisterCount());
        }
    }

    // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
    // üí• –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –∫–æ—Å–≤–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î —á–µ—Ä–µ–∑ ClientService
    @PostMapping("/login")
    // –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ Swagger
    @Operation(
            summary = "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
            description = "–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ.",
            requestBody = @RequestBody(
                    description = "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                    required = true,
                    content = @Content(
                            mediaType = "application/x-www-form-urlencoded",
                            schema = @Schema(implementation = Void.class),
                            examples = @ExampleObject(
                                    name = "Login Example",
                                    summary = "–ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–Ω–∞",
                                    value = "username=user1&password=pass1"
                            )
                    )
            )
    )
    public String login(
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏–Ω–∞
            @RequestParam @Schema(description = "–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", example = "user1") String username,
            @RequestParam @Schema(description = "–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", example = "pass1") String password
    ) {
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞
        log.info("Login attempt for username: {}", username);
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–≤–µ—Ç–∞
        timeoutController.applyTimeout("login");
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        long startTime = System.nanoTime();

        try {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
            metricsService.incrementLoginCounter();
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –∫–∞–∫ –º–µ—Ç—Ä–∏–∫—É
            metricsService.recordLoginSummary(password.length());
            // üí• –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞)
            Optional<Client> clientOpt = clientService.login(username, password);
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ö–æ–¥–∞
            metricsService.recordLoginTimer(System.nanoTime() - startTime);
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
            if (clientOpt.isPresent()) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–µ—Å—Å–∏–∏
                sessionManager.login(clientOpt.get());
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
                meterRegistry.counter("auth_login_success_total").increment();
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                return "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: " + username;
            }
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
            meterRegistry.counter("auth_login_failure_total").increment();
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å";
        } finally {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –∫–∞–∫ gauge
            meterRegistry.gauge("auth_login_active", metricsService.getLoginCount());
        }
    }

    // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    @PostMapping("/logout")
    // –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤ Swagger
    @Operation(
            summary = "–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
            description = "–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    )
    public String logout() {
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥
        log.info("Logout request");
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–≤–µ—Ç–∞
        timeoutController.applyTimeout("logout");
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        long startTime = System.nanoTime();

        try {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–æ–≤
            metricsService.incrementLogoutCounter();
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –≤—ã—Ö–æ–¥–∞
            metricsService.recordLogoutSummary(1);
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é (–ë–î –∑–¥–µ—Å—å –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç—Å—è)
            sessionManager.logout();
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
            metricsService.recordLogoutTimer(System.nanoTime() - startTime);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            return "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥";
        } finally {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤ –∫–∞–∫ gauge
            meterRegistry.gauge("auth_logout_active", metricsService.getLogoutCount());
        }
    }

    // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    @GetMapping("/isLogged")
    // –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤ Swagger
    @Operation(
            summary = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
    )
    public String isLogged() {
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        log.info("Checking login status");
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        long startTime = System.nanoTime();

        try {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞—Ç—É—Å–∞
            metricsService.incrementIsLoggedCounter();
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
            metricsService.recordIsLoggedSummary(1);
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ (–ë–î –∑–¥–µ—Å—å –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç—Å—è)
            String status = sessionManager.getLoginStatus();
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            metricsService.recordIsLoggedTimer(System.nanoTime() - startTime);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
            return status;
        } finally {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–∞–∫ gauge
            meterRegistry.gauge("auth_is_logged_active", metricsService.getIsLoggedCount());
        }
    }

    // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @GetMapping("/user")
    // –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤ Swagger
    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."
    )
    public String getUser() {
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log.info("Fetching logged-in user");
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        long startTime = System.nanoTime();

        try {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            metricsService.incrementGetUserCounter();
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –∑–∞–ø—Ä–æ—Å–∞
            metricsService.recordGetUserSummary(1);
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏ (–ë–î –∑–¥–µ—Å—å –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç—Å—è)
            Client loggedInClient = sessionManager.getLoggedInClient();
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            metricsService.recordGetUserTimer(System.nanoTime() - startTime);
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –ª–æ–≥–∏–Ω
            if (loggedInClient != null) {
                return loggedInClient.getUsername();
            }
            // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            return "‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω";
        } finally {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–∫ gauge
            meterRegistry.gauge("auth_get_user_active", metricsService.getGetUserCount());
        }
    }
}