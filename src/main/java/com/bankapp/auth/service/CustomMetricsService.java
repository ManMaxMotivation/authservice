package com.bankapp.auth.service;

// –ò–º–ø–æ—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
import io.micrometer.core.instrument.Counter; // –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–±—ã—Ç–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π)
import io.micrometer.core.instrument.DistributionSummary; // –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏)
import io.micrometer.core.instrument.MeterRegistry; // –†–µ–µ—Å—Ç—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Prometheus
import io.micrometer.core.instrument.Timer; // –ö–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
import org.springframework.stereotype.Service; // –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–ª–æ—è
import java.util.concurrent.TimeUnit; // –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã)
import java.util.concurrent.atomic.AtomicInteger; // –ö–ª–∞—Å—Å –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è gauge)

// üí• @Service —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–ª–æ—è Spring
// Spring –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –±–∏–Ω —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∞–º–∏
@Service
public class CustomMetricsService {

    // –ü–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ (Counter) –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–±—ã—Ç–∏–π
    private final Counter registerCounter; // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    private final Counter loginCounter; // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
    private final Counter logoutCounter; // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤—ã—Ö–æ–¥–∞
    private final Counter isLoggedCounter; // –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    private final Counter getUserCounter; // –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // –ü–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (DistributionSummary) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    private final DistributionSummary registerSummary; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏)
    private final DistributionSummary loginSummary; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è)
    private final DistributionSummary logoutSummary; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã—Ö–æ–¥–æ–≤
    private final DistributionSummary isLoggedSummary; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    private final DistributionSummary getUserSummary; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // –ü–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ (Timer) –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    private final Timer registerTimer; // –¢–∞–π–º–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    private final Timer loginTimer; // –¢–∞–π–º–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞
    private final Timer logoutTimer; // –¢–∞–π–º–µ—Ä –¥–ª—è –≤—ã—Ö–æ–¥–∞
    private final Timer isLoggedTimer; // –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    private final Timer getUserTimer; // –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // –ü–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ (AtomicInteger) –¥–ª—è gauge
    // –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    private final AtomicInteger registerCount = new AtomicInteger(0); // –°—á–µ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
    private final AtomicInteger loginCount = new AtomicInteger(0); // –°—á–µ—Ç—á–∏–∫ –≤—Ö–æ–¥–æ–≤
    private final AtomicInteger logoutCount = new AtomicInteger(0); // –°—á–µ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–æ–≤
    private final AtomicInteger isLoggedCount = new AtomicInteger(0); // –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    private final AtomicInteger getUserCount = new AtomicInteger(0); // –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ MeterRegistry
    public CustomMetricsService(MeterRegistry meterRegistry) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ (Counter)
        // üí• –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        // –ò–º—è –º–µ—Ç—Ä–∏–∫–∏: auth_register_total, —Ç–µ–≥: environment=development
        this.registerCounter = Counter.builder("auth_register_total")
                .description("Total number of registration attempts")
                .tags("environment", "development")
                .register(meterRegistry);
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –≤—Ö–æ–¥–∞
        this.loginCounter = Counter.builder("auth_login_total")
                .description("Total number of login attempts")
                .tags("environment", "development")
                .register(meterRegistry);
        // –î–ª—è –≤—ã—Ö–æ–¥–∞
        this.logoutCounter = Counter.builder("auth_logout_total")
                .description("Total number of logout attempts")
                .tags("environment", "development")
                .register(meterRegistry);
        // –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.isLoggedCounter = Counter.builder("auth_is_logged_total")
                .description("Total number of isLogged checks")
                .tags("environment", "development")
                .register(meterRegistry);
        // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.getUserCounter = Counter.builder("auth_get_user_total")
                .description("Total number of getUser requests")
                .tags("environment", "development")
                .register(meterRegistry);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (DistributionSummary)
        // üí• –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏)
        this.registerSummary = DistributionSummary.builder("auth_register_summary")
                .description("Summary of registration data (e.g., name length)")
                .tags("environment", "development")
                .register(meterRegistry);
        // –î–ª—è –≤—Ö–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è)
        this.loginSummary = DistributionSummary.builder("auth_login_summary")
                .description("Summary of login data (e.g., password length)")
                .tags("environment", "development")
                .register(meterRegistry);
        // –î–ª—è –≤—ã—Ö–æ–¥–æ–≤
        this.logoutSummary = DistributionSummary.builder("auth_logout_summary")
                .description("Summary of logout data")
                .tags("environment", "development")
                .register(meterRegistry);
        // –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.isLoggedSummary = DistributionSummary.builder("auth_is_logged_summary")
                .description("Summary of isLogged checks")
                .tags("environment", "development")
                .register(meterRegistry);
        // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.getUserSummary = DistributionSummary.builder("auth_get_user_summary")
                .description("Summary of getUser requests")
                .tags("environment", "development")
                .register(meterRegistry);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ (Timer)
        // üí• –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        this.registerTimer = Timer.builder("auth_register_duration")
                .description("Time taken for registration requests")
                .tags("environment", "development")
                .register(meterRegistry);
        // –î–ª—è –≤—Ö–æ–¥–∞
        this.loginTimer = Timer.builder("auth_login_duration")
                .description("Time taken for login requests")
                .tags("environment", "development")
                .register(meterRegistry);
        // –î–ª—è –≤—ã—Ö–æ–¥–∞
        this.logoutTimer = Timer.builder("auth_logout_duration")
                .description("Time taken for logout requests")
                .tags("environment", "development")
                .register(meterRegistry);
        // –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.isLoggedTimer = Timer.builder("auth_is_logged_duration")
                .description("Time taken for isLogged checks")
                .tags("environment", "development")
                .register(meterRegistry);
        // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.getUserTimer = Timer.builder("auth_get_user_duration")
                .description("Time taken for getUser requests")
                .tags("environment", "development")
                .register(meterRegistry);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
    // üí• –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
    public void incrementRegisterCounter() {
        registerCounter.increment(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫—É –≤ Prometheus
        registerCount.incrementAndGet(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è gauge
    }

    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –≤—Ö–æ–¥–∞
    public void incrementLoginCounter() {
        loginCounter.increment();
        loginCount.incrementAndGet();
    }

    // –î–ª—è –≤—ã—Ö–æ–¥–∞
    public void incrementLogoutCounter() {
        logoutCounter.increment();
        logoutCount.incrementAndGet();
    }

    // –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    public void incrementIsLoggedCounter() {
        isLoggedCounter.increment();
        isLoggedCount.incrementAndGet();
    }

    // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public void incrementGetUserCounter() {
        getUserCounter.increment();
        getUserCount.incrementAndGet();
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    // üí• –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏)
    public void recordRegisterSummary(double value) {
        registerSummary.record(value); // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Prometheus
    }

    // –î–ª—è –≤—Ö–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è)
    public void recordLoginSummary(double value) {
        loginSummary.record(value);
    }

    // –î–ª—è –≤—ã—Ö–æ–¥–æ–≤
    public void recordLogoutSummary(double value) {
        logoutSummary.record(value);
    }

    // –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    public void recordIsLoggedSummary(double value) {
        isLoggedSummary.record(value);
    }

    // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public void recordGetUserSummary(double value) {
        getUserSummary.record(value);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    // üí• –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤ –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥–∞—Ö)
    public void recordRegisterTimer(long durationNanos) {
        registerTimer.record(durationNanos, TimeUnit.NANOSECONDS); // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –≤ Prometheus
    }

    // –î–ª—è –≤—Ö–æ–¥–∞
    public void recordLoginTimer(long durationNanos) {
        loginTimer.record(durationNanos, TimeUnit.NANOSECONDS);
    }

    // –î–ª—è –≤—ã—Ö–æ–¥–∞
    public void recordLogoutTimer(long durationNanos) {
        logoutTimer.record(durationNanos, TimeUnit.NANOSECONDS);
    }

    // –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    public void recordIsLoggedTimer(long durationNanos) {
        isLoggedTimer.record(durationNanos, TimeUnit.NANOSECONDS);
    }

    // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public void recordGetUserTimer(long durationNanos) {
        getUserTimer.record(durationNanos, TimeUnit.NANOSECONDS);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤ (–¥–ª—è gauge)
    // üí• –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
    public int getRegisterCount() {
        return registerCount.get();
    }

    // –î–ª—è –≤—Ö–æ–¥–æ–≤
    public int getLoginCount() {
        return loginCount.get();
    }

    // ‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç loginCount –≤–º–µ—Å—Ç–æ logoutCount
    public int getLogoutCount() {
        return loginCount.get(); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å logoutCount.get()
    }

    // –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    public int getIsLoggedCount() {
        return isLoggedCount.get();
    }

    // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public int getGetUserCount() {
        return getUserCount.get();
    }
}